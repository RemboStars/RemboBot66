import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
CARD_DETAILS = os.getenv("CARD_DETAILS")
PRICE_PER_STAR = 1.5

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class BuyStars(StatesGroup):
    waiting_for_amount = State()
    waiting_for_receipt = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = [
        [KeyboardButton(text="üí´ –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã")],
        [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

# –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤—ë–∑–¥.", reply_markup=main_menu())

# –ù–∞–∂–∞–ª–∏ "–ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã"
@dp.message(F.text == "üí´ –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã")
async def buy_stars(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:")
    await state.set_state(BuyStars.waiting_for_amount)

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
@dp.message(BuyStars.waiting_for_amount, F.text.regexp(r"^\d+$"))
async def process_amount(message: types.Message, state: FSMContext):
    amount = int(message.text)
    total = amount * PRICE_PER_STAR
    await state.update_data(amount=amount, total=total)

    await message.answer(
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total:.2f} ‚ÇΩ</b>\n\n"
        f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\n<code>{CARD_DETAILS}</code>\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—é–¥–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é üìé"
    )
    await state.set_state(BuyStars.waiting_for_receipt)

# –ü–æ–ª—É—á–∞–µ–º –∫–≤–∏—Ç–∞–Ω—Ü–∏—é
@dp.message(BuyStars.waiting_for_receipt, F.photo | F.document)
async def process_receipt(message: types.Message, state: FSMContext):
    data = await state.get_data()
    amount = data["amount"]
    total = data["total"]

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    await bot.send_message(
        ADMIN_ID,
        f"üõí –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or message.from_user.id}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount} –∑–≤—ë–∑–¥\n"
        f"–°—É–º–º–∞: {total:.2f} ‚ÇΩ"
    )
    if message.photo:
        await bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption="–ö–≤–∏—Ç–∞–Ω—Ü–∏—è")
    elif message.document:
        await bot.send_document(ADMIN_ID, message.document.file_id, caption="–ö–≤–∏—Ç–∞–Ω—Ü–∏—è")

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤—ë–∑–¥.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
@dp.message(BuyStars.waiting_for_amount)
async def invalid_amount(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥.")

async def main():
    await dp.start_polling(bot)

if name == "main":
    import asyncio
    asyncio.run(main())
